const correctSound = document.getElementById("correct-sound");
const gameOverSound = document.getElementById("game-over-sound");
const wordContainer = document.getElementById("word-container");
const inputBox = document.getElementById("input-box");
const scoreDisplay = document.getElementById("score");
const timeDisplay = document.getElementById("time");
const gameOverModal = document.getElementById("game-over-modal");
const totalWordsDisplay = document.getElementById("total-words");
const finalScoreDisplay = document.getElementById("final-score");
const restartBtn = document.getElementById("restart-btn");
const backToMenuButton = document.getElementById("backToMenuButton");

let selectedDifficulty = "";
let selectedCategory = "";
let timer = 0;
let words = [];
let currentWordIndex = 0;
let score = 0;
let currentWord = "";
let timerInterval = null;

const wordBanks = {
  science: [
    "Conductor", "Cohesion", "Compounds", "Diffusion", "Breathing", "Cometary", "Biology"
  ],
  computer: [
    "Updater", "Datacenter", "Drive", "Operating", "Loader"
  ],
  technology: [
    "Compress", "Mounting", "Gaskets", "Filters", "Sensors"
  ]
};

const sentenceBanks = {
  science: [
    "The Doppler effect describes the change in frequency of a wave relative to an observer.",
    "Earth's magnetic field is generated by movements in  its molten outer core",
    "Sound travels faster in solids than in liquids and gases."
  ],
  computer: [
    "Each keystroke writes a line of code,",
    "Building programs, breaking the mode.",
    "Typing swiftly, let ideas run,",
    "In the world of logic, you’ve just begun."
  ],
  technology: [
    "With every key, the future’s near,",
    "Typing sharpens the tech frontier.",
    "Innovations grow with every tap,",
    "You hold the world within your lap."
  ]
};

const sentenceTimers = {
  easy: 260,
  medium: 200,
  difficult: 130
}

function initializeGame() {
  if (mode === "sentence") {
    words = sentenceBanks[selectedCategory];
  } else {
    words = wordBanks[selectedCategory];
  }

  currentWordIndex = 0;
  score = 0;
  timer = calculateInitialTime(selectedDifficulty);
  currentWord = words[currentWordIndex];
  updateUI();
}

inputBox.addEventListener("input", () => {
  const inputText = inputBox.value.trim();

  if (mode === "sentence") {
    if (inputText === currentWord) {
      correctInput();
    }
  } else {
    // For word mode
    if (inputText.toLowerCase() === currentWord.toLowerCase()) {
      correctInput();
    }
  }
});

function correctInput() {
  correctSound.play();
  score++; // Increment score
  scoreDisplay.textContent = score; // Update score on screen
  inputBox.value = ""; // Clear input box
  currentWordIndex++; // Move to the next word/sentence
  if (currentWordIndex < words.length) {
    if (mode === "sentence") {
      displaySentence(); // Update for sentence mode
    } else {
      displayWord(); // Update for word mode
    }
  } else {
    endGame(); // End the game if all words are completed
  }
}
function calculateInitialTime(difficulty, mode) {
  let time = 0;

  if (mode === 'words') {
    // Time limits for Words Mode
    switch (difficulty) {
      case 'easy':
        time = 100; // 100 seconds for Easy
        break;
      case 'medium':
        time = 80; // 80 seconds for Medium
        break;
      case 'hard':
        time = 50; // 50 seconds for Hard
        break;
      default:
        console.error("Invalid difficulty level for Words Mode");
    }
  } else if (mode === 'sentence') {
    // Time limits for Sentence Mode
    switch (difficulty) {
      case 'easy':
        time = 260; // 260 seconds for Easy
        break;
      case 'medium':
        time = 200; // 200 seconds for Medium
        break;
      case 'hard':
        time = 130; // 130 seconds for Hard
        break;
      default:
        console.error("Invalid difficulty level for Sentence Mode");
    }
  } else {
    console.error("Invalid mode. Please use 'words' or 'sentence'.");
  }

  return time;
}

document.querySelectorAll(".mode-select").forEach((btn) =>
  btn.addEventListener("click", (e) => {
    mode = e.target.dataset.mode;
  })
);

document.querySelectorAll(".difficulty-select").forEach((btn) =>
  btn.addEventListener("click", (e) => {
    selectedDifficulty = e.target.dataset.difficulty;
  })
);

let inputType = "word";
let sentences = [];
let currentSentence = "";

console.log(window.location.href);

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]]; // Swap elements
  }
}

function updateDifficultyOptions(inputType) {
  const difficultySection = document.getElementById("difficult-section");
  const difficultyOptions = difficultySection.querySelectorAll("option");

  if (inputType === "sentence") {
    // update options
    difficultyOptions[0].textcontent = "Easy (4 min 20sec)"
    difficultyOptions[1].textContent = "Medium (3min 20sec)"
    difficultyOptions[2].textContent = "Difficult (2min 10sec)"
  } else {
    // reset options for words
    difficultyOptions[0].textcontent = "Easy (4 letter words)"
    difficultyOptions[1].textcontent = "Easy (6 letter words)"
    difficultyOptions[2].textcontent = "Easy (5-8 ltter words)"
  }
}

function setupGame() {
  console.log("Setting up game...");

  if (inputType === "word") {
    switch (selectedDifficulty) {
      case "easy":
        timer = 100;
        words = wordBanks[selectedCategory].filter(word => word.length === 4);
        break;
      case "medium":
        timer = 80;
        words = wordBanks[selectedCategory].filter(word => word.length === 6);
        break;
      case "difficult":
        timer = 50;
        words = wordBanks[selectedCategory].filter(word => word.length >= 6 && word.length <= 8);
        break;
      default:
        console.error("Invalid difficulty or category.");
        return;
    }
    shuffleArray(words);
  } else if (inputType === "sentence") {
    timer = sentenceTimers[selectedDifficulty];
    stanzas = sentenceBanks[selectedCategory];
    shuffleArray(sentences);
    currentSentence = sentences[0];
  }

  currentWordIndex = 0; // Reset word index
  score = 0; // Reset score
  scoreDisplay.textContent = score;
  timeDisplay.textContent = timer; // Display initial timer
}

function displayWord() {
  if (currentWordIndex < words.length) {
    currentWord = words[currentWordIndex];
    wordContainer.innerHTML = "";
    currentWord.split("").forEach(letter => {
      const letterSpan = document.createElement("span");
      letterSpan.className = "letter";
      letterSpan.textContent = letter;
      wordContainer.appendChild(letterSpan);
    });
  } else {
    endGame(); // Correctly end game when all words are done
  }
}

function displaySentence() {
  if (currentWordIndex < sentences.length) {
    currentSentence = sentences[currentWordIndex];
    wordContainer.innerHTML = ""; // Clear previous content
    currentSentence.split("").forEach((char) => {
      const charSpan = document.createElement("span");
      charSpan.className = "sentence-letter";
      charSpan.textContent = char;
      wordContainer.appendChild(charSpan);
    });
  } else {
    endGame();
  }
}

// Add an event listener for input tracking
inputBox.addEventListener("input", () => {
  const inputText = inputBox.value;
  const letters = document.querySelectorAll("#word-container .letter");

  letters.forEach((letterSpan, index) => {
    if (index < inputText.length) {
      const typedChar = inputText[index];

      if (typedChar === letterSpan.textContent) {
        letterSpan.classList.add("correct");
        letterSpan.classList.remove("incorrect");
      } else {
        letterSpan.classList.add("incorrect");
        letterSpan.classList.remove("correct");
      }
    } else {
      // Reset styles for untouched letters
      letterSpan.classList.remove("correct", "incorrect");
    }
  });

  // Check if the entire sentence is completed

}
);

let gameEnded = false;

function startGame() {
  gameEnded = false;
  inputBox.disabled = false;

  if (!selectedDifficulty || !selectedCategory) {
    console.error("Game setup is incomplete.");
    return;
  }

  setupGame();
  inputBox.value = "";
  inputBox.disabled = false;

  if (inputType === "word") {
    displayWord();
  } else if (inputType === "sentence") {
    displaySentence();
  }

  clearInterval(timerInterval);
    timerInterval = setInterval(() => {
        if (!gameEnded) { // Check before decrementing
            timer--;
            timeDisplay.textContent = timer;

            if (timer <= 0) {
                endGame();
            }
        }
    }, 1000);

    if (inputType === "word") {
      inputBox.removeEventListener("input", handleSentenceInput);
      inputBox.addEventListener("input", handleInput);
   } else if (inputType === "sentence") {
      inputBox.removeEventListener("input", handleInput);
      inputBox.addEventListener("input", handleSentenceInput);
   }
}

function endGame() {
  if (!gameEnded) { // Check the flag before executing endGame logic
    gameEnded = true; // Set the flag immediately
    console.log("Game Over...");
    clearInterval(timerInterval);
    inputBox.disabled = true;
    gameOverSound.play();
    totalWordsDisplay.textContent = score;
    finalScoreDisplay.textContent = score;
    gameOverModal.style.display = "flex";
  }
}

function resetGame() {
  gameOverModal.style.display = "none";
  setupGame();
  startGame();
  const inputBox = document.getElementById('input-box');
  inputBox.value = ''; // Clear input
  inputBox.focus();
}

function handleInput() {
  if (gameEnded) return; // Immediately exit if the game has ended

  const typedText = inputBox.value.trim().toLowerCase(); // Lowercase here
  const currentWordLower = currentWord.toLowerCase(); // Lowercase here too

  const wordLetters = document.querySelectorAll(".letter");
  wordLetters.forEach((letterSpan, index) => {
      const typedChar = typedText[index];
      if (typedChar === undefined) {
          letterSpan.className = "letter";
      } else if (typedChar === letterSpan.textContent.toLowerCase()) {
          letterSpan.className = "letter correct";
      } else {
          letterSpan.className = "letter incorrect";
      }
  });

  if (typedText === currentWordLower) {
      score++;
      scoreDisplay.textContent = score;
      correctSound.play();
      inputBox.value = "";
      currentWordIndex++;

      if (currentWordIndex < words.length) {
          displayWord();
      } else {
          endGame();
      }
  }
}

function handleSentenceInput() {
  const input = inputBox.value; // Get the current input value
  const sentenceLetters = document.querySelectorAll(".sentence-letter");

  // Loop through each letter in the displayed sentence
  sentenceLetters.forEach((letterSpan, index) => {
    const typedChar = input[index]; // Get the corresponding typed character

    if (typedChar === undefined) {
      // If the user hasn't typed this character yet
      letterSpan.classList.remove("correct", "incorrect");
    } else if (typedChar === letterSpan.textContent) {
      // If the character matches
      letterSpan.classList.add("correct");
      letterSpan.classList.remove("incorrect");
    } else {
      // If the character doesn't match
      letterSpan.classList.add("incorrect");
      letterSpan.classList.remove("correct");
    }
  });

  // Check if the entire sentence matches the input
  if (input.trim() === currentSentence) {
    correctSound.play();
    inputBox.value = ""; // Clear the input box
    currentWordIndex++; // Move to the next sentence
    if (currentWordIndex < sentences.length) {
      displaySentence(); // Display the next sentence
    } else {
      endGame(); // End the game if all sentences are completed
    }
  }
}

restartBtn.addEventListener("click", () => {
  resetGame();
  document.getElementById('input-box').disabled = false;
});

backToMenuButton.addEventListener("click", () => {
  console.log("Navigating back to menu...");

  // Hide game over modal
  gameOverModal.style.display = "none";

  // Reset inline styles or states
  document.body.style.margin = "0";
  document.body.style.padding = "0";
  document.body.style.position = "relative";

  // Navigate to homepage
  window.location.href = "/";

  // Reset game state
  clearInterval(timerInterval);
  timer = 0;
  words = [];
  currentWordIndex = 0;
  score = 0;
  currentWord = "";
  inputBox.value = "";
  inputBox.disabled = true;
  wordContainer.innerHTML = "";
  scoreDisplay.textContent = "0";
  timeDisplay.textContent = "0";

  // Navigate to the homepage
  const homepage = document.getElementById("homepage"); // Example selector
  const gamepage = document.getElementById("gamepage"); // Example selector

  homepage.style.display = "block"; // Show the homepage
  gamepage.style.display = "none"; // Hide the game page

  // Remove focus from the input box to prevent unwanted scroll
  inputBox.blur();

  // Explicitly set focus on the homepage or another non-scrolling element
  homepage.focus();

  // Optionally reset scroll position
  homepage.scrollTop = 0;
});

function resetGameVariables() {
  selectedDifficulty = "";
  selectedCategory = "";
  timer = 0;
  words = [];
  currentWordIndex = 0;
  score = 0;
  currentWord = "";
  timerInterval = null;

  // Reset UI elements
  scoreDisplay.textContent = 0;
  timeDisplay.textContent = 0;
  wordContainer.innerHTML = "";
  inputBox.disabled = false;
}

document.addEventListener("DOMContentLoaded", () => {
  const homepage = document.getElementById("homepage");
  const gamePage = document.getElementById("gamePage");
  const gameForm = document.getElementById("gameForm");
  const inputTypeSelector = document.getElementById("inputType");
  const difficultySelector = document.getElementById("difficulty");

  function updateDifficultyOptions(inputType) {
    if (inputType === "sentence") {
      difficultySelector.innerHTML = `
        <option value="easy">Easy (4 min 20sec)</option>
        <option value="medium">Medium (3min 20sec)</option>
        <option value="difficult">Difficult (2min 10sec)</option>
      `;
    } else if (inputType === "word") {
      difficultySelector.innerHTML = `
        <option value="easy">Easy (4 letter word)</option>
        <option value="medium">Medium (6 letter word)</option>
        <option value="difficult">Difficult (5-8 letter word)</option>
      `;
    }
  }

  // Attach change event listener to the input type dropdown
  inputTypeSelector.addEventListener("change", () => {
    const selectedType = inputTypeSelector.value; // Get the selected input type
    updateDifficultyOptions(selectedType); // Update difficulty options dynamically
  });

  gameForm.addEventListener("submit", (e) => {
    e.preventDefault();

    const playerName = document.getElementById("playerName").value;
    selectedDifficulty = document.getElementById("difficulty").value;
    selectedCategory = document.getElementById("category").value;
    inputType = document.getElementById("inputType").value;

    console.log("Player Name:", playerName);
    console.log("Difficulty:", selectedDifficulty);
    console.log("Category:", selectedCategory);
    console.log("Input Type:", inputType);

    if (inputType === "sentence") {
      sentences = sentenceBanks[selectedCategory];
      shuffleArray(sentences);
      currentSentence = sentences[0];
    } else {
      words = wordBanks[selectedCategory];
      shuffleArray(words);
    }

    homepage.style.display = "none";
    gamePage.style.display = "block";

    setupGame();
    startGame();
  });
});

// Initialize game setup
setupGame();